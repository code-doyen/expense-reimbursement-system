package com.revature.aspect;


import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Component
@Aspect
public class TracingAspect {
	public static final Logger logger = Logger.getLogger(TracingAspect.class);
	
	@Before("execution()")
	public void entering(JoinPoint joinPoint){
		logger.trace("Entering: " + joinPoint.getStaticPart().toString()
				+ " with parameter: " + joinPoint.getArgs()[0]);
	}
	
	@After("execution(* print (...))")
	public void exiting(JoinPoint joinPoint){
		logger.trace("Exiting: " + joinPoint.getStaticPart().toString()
				+ " with parameter: " + joinPoint.getArgs()[0]);
	}
	
	@Around("execution(* print* (String))")
	public void around(ProceedingJoinPoint pjp){
			logger.trace("Around: " + pjp.getStaticPart().toString()
					+ " with parameter: " +pjp.getArgs()[0]);
			try{
				System.out.println("String is a number: " + Integer.parseInt((String) pjp.getArgs()[0]);
			}catch(NumberFormatException e){
				System.out.println("String " + pjp.getArgs()[0] + " is not a number.");
			}
	}
}
